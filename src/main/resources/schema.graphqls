type Query {
  "Fetch a specific event by ID"
  eventById(id: ID!): Event
  "Fetch a specific series by ID"
  seriesById(id: ID!): Series
  "List all events. Returns a connection to allow pagination."
  events(sortBy: EventSort, limit: Int, after: String): EventConnection!
}

type Mutation {
  addEvent(event: EventInput): Event
}

input EventInput {
  title: String!
  description: String
  duration: Float!
  seriesId: ID
}

type Event {
  id: ID!
  title: String!
  description: String
  "Duration in seconds"
  duration: Float!
  series: Series
  tracks: [Track!]!
}

"A series. Can contain multiple events."
type Series {
  id: ID!
  name: String!
  description: String
  events(sortBy: EventSort, limit: Int, after: String): EventConnection!
}

"""
A list of events with meta information to allow for flexible pagination.

To just retrieve all data, use `edges { node { ... } }`.
"""
type EventConnection {
  edges: [EventEdge!]!
  pageInfo: PageInfo!
}

type EventEdge {
  cursor: String!
  node: Event!
}

type PageInfo {
  """
  The cursor of the last event in the connection. This is what you want to pass as `after` parameter
  to get the next page.
  """
  endCursor: String
  "Cursor of first event. Currently useless as there is no `before` equivalent to `after`."
  startCursor: String
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
}

enum EventSort {
  TITLE
  DURATION
}

type Track {
  mimetype: String
  url: String
  framerate: Float
  width: Int
  height: Int
}